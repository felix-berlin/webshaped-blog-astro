---
// import BlogPostVue from '@layouts/BlogPost.vue'
import BlogPost from "@layouts/BlogPost.astro";
import PostBlocks from "@components/ContentBlocks.vue";
import { getAllPostsWithSlugs, getPostBySlug } from "@services/api";
import type {
  CoreHeadingBlock,
  RootQueryToPostConnection,
} from "@ts_types/generated/graphql";
import ListBlock from "@components/content-blocks/ListBlock.vue";
import CodeBlock from "@components/content-blocks/CodeBlock.vue";
import ButtonBlock from "@components/content-blocks/ButtonBlock.vue";
import FigureBlock from "@components/content-blocks/FigureBlock.vue";
import HeadlineBlock from "@components/content-blocks/HeadlineBlock.vue";
import ParagraphBlock from "@components/content-blocks/ParagraphBlock.vue";
import { Prism } from "@astrojs/prism";
import { parse } from "@utils/helpers";
import "prismjs-tomorrow-theme/prism-tomorrow.css";
import he from "he";

import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";

export const getStaticPaths = async () => {
  const postWithSlugsDe = await getAllPostsWithSlugs();
  const postWithSlugsEn = await getAllPostsWithSlugs("EN");

  const postWithSlugsAllLang = [
    ...postWithSlugsDe.edges,
    ...postWithSlugsEn.edges,
  ];

  return postWithSlugsAllLang.map(({ node }) => {
    return {
      params: {
        postSlug: node.slug,
        lang: node?.language?.slug,
      },
    };
  });
};

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { postSlug, lang } = Astro.params as Params;
const post = await getPostBySlug(postSlug!, 90);

const findLanguage = (content: string, prefix = "lang-"): string | null => {
  const regex = new RegExp(prefix + "[a-z]+", "gm");
  const match = content.match(regex)?.toString().replace(prefix, "") as
    | string
    | null;
  return match;
};

const headings = post?.blocks?.filter(
  (block: CoreHeadingBlock) =>
    block.name === "core/heading" &&
    (JSON.parse(block.attributesJSON as string).level === 2 ||
      JSON.parse(block.attributesJSON as string).level === 3),
) as CoreHeadingBlock[];
---

<BlogPost content={post} headings={headings}>
  {
    post?.blocks?.map((block) => {
      if (block.name === "core/paragraph") {
        return <ParagraphBlock block={block} />;
      }
      if (block.name === "core/heading") {
        return <HeadlineBlock block={block} />;
      }
      if (block.name === "core/image") {
        return <FigureBlock block={block} />;
      }
      if (block.name === "core/buttons") {
        return <ButtonBlock block={block} />;
      }
      if (block.name === "core/list") {
        return <ListBlock block={block} />;
      }
      if (block.name === "core/code") {
        return (
          <div class="c-blocks__code">
            <Prism
              lang={parse(block.attributesJSON).className}
              code={he.decode(parse(block.attributesJSON).content)}
            />
          </div>
        );
      } else {
        return <Fragment set:html={block.originalContent} />;
      }
    })
  }
</BlogPost>
