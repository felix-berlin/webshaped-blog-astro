---
// Styles
import "@styles/components/_blocks.scss";
import "@styles/plugins/shiki.scss";

// Components
import BlogPost from "@layouts/BlogPost.astro";
import type { CoreHeading } from "@ts_types/generated/graphql";
import ListBlock from "@components/content-blocks/ListBlock.vue";
import ButtonsBlock from "@components/content-blocks/ButtonsBlock.vue";
import FigureBlock from "@components/content-blocks/FigureBlock.vue";
import HeadlineBlock from "@components/content-blocks/HeadlineBlock.vue";
import ParagraphBlock from "@components/content-blocks/ParagraphBlock.vue";
import DetailsBlock from "@components/content-blocks/DetailsBlock.vue";
import GitHubRawData from "@components/content-blocks/GitHubRawData.astro";
import CodeHighlighting from "@components/content-blocks/CodeHighlighting.astro";
import { Code } from "astro/components";
import he from "he";
import materialThemeLighter from "tm-themes/themes/material-theme-lighter.json";
import materialThemePalenight from "tm-themes/themes/material-theme-palenight.json";
import { WP_API } from "astro:env/client";
import { Client, cacheExchange, fetchExchange } from "@urql/core";
import { GetAllPostsDocument } from "@/gql/graphql.ts";
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from "astro";

export const prerender = true;

export const getStaticPaths = (async () => {
  const client = new Client({
    url: WP_API,
    fetchOptions: {
      headers: {
        "Content-Type": "application/json",
      },
    },
    exchanges: [cacheExchange, fetchExchange],
  });

  const postsResponse = await client.query(GetAllPostsDocument, { size: 90 }).toPromise();

  // Posts without slugs happen mostly on draft posts
  const posts = postsResponse?.data?.posts?.nodes.filter((post) => post?.slug);

  if (!posts) {
    return;
  }

  return posts.map((post) => {
    return {
      params: {
        postSlug: post.slug,
        lang: post?.language?.slug,
      },
      props: {
        post: post,
      },
    };
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { postSlug, lang } = Astro.params as Params;
const { post } = Astro.props;

const isCoreHeading = (block: any): block is CoreHeading => {
  return (
    block &&
    block.name === "core/heading" &&
    (block.attributes?.level === 2 || block.attributes?.level === 3)
  );
};

const headings = post?.editorBlocks?.filter(isCoreHeading) as CoreHeading[];
---

<BlogPost content={post} headings={headings}>
  {
    post?.editorBlocks?.map((block) => {
      if (!block) return null;

      if (block.name === "core/paragraph") {
        return <ParagraphBlock block={block} />;
      }
      if (block.name === "core/heading") {
        return <HeadlineBlock block={block} />;
      }
      if (block.name === "core/image") {
        return <FigureBlock block={block} />;
      }
      if (block.name === "core/buttons") {
        return <ButtonsBlock block={block} />;
      }
      if (block.name === "core/list") {
        return <ListBlock block={block} />;
      }
      if (block.name === "core/details") {
        return <DetailsBlock block={block} />;
      }
      if (block.name === "acf/github-raw-data") {
        return <GitHubRawData block={block} />;
      }
      if (block.name === "acf/code-highlighting") {
        return <CodeHighlighting block={block} />;
      }
      if (block.name === "core/code") {
        return (
          <div class="c-blocks__code">
            <Code
              code={he.decode(block.attributes?.content || "")}
              lang={block.attributes?.className}
              themes={{
                light: materialThemeLighter,
                dark: materialThemePalenight,
              }}
              wrap
            />
          </div>
        );
      } else {
        return <Fragment set:html={block.originalContent} />;
      }
    })
  }
</BlogPost>
