@use '@styles/mixins/mixins' as bp;
@use '@styles/variables/colors' as colors;
@use '@sass-butler/mixins' as butler-mx;
@use '@sass-butler/functions' as butler-fn;

@layer global {
	:root {
		@each $name, $color in colors.$colors {
			/* stylelint-disable-next-line custom-property-pattern */
			--#{$name}: #{$color};
		}
	}

	html {
		background-color: var(--color-background, #fff);

		&::after {
			background: linear-gradient(40deg, #{butler-fn.hex-to-rgb(colors.$red-light, 65.6%)} 0%, #{butler-fn.hex-to-rgb(colors.$blue-dark, 40%)});
		}
	}

	@include butler-mx.dark-mode-class('html', false) {
		--color-background: var(--blue-dark);
	}
}

body {
	position: relative;
	margin: 0;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;

	&::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;

		// background: linear-gradient(12deg, #{butler-fn.hex-to-rgb(colors.$red-light, 60%)} 0%, #{butler-fn.hex-to-rgb(colors.$blue-dark, 25%)} 30%);
		background: linear-gradient(var(--gradient-background, 12deg, #{butler-fn.hex-to-rgb(colors.$red-light, 50%)} 0%, #{butler-fn.hex-to-rgb(colors.$blue-dark, 25%)} 50%));
		z-index: -2;

		@include bp.breakpoint('md') {
			--gradient-background: linear-gradient(12deg, #{butler-fn.hex-to-rgb(colors.$red-light, 60%)} 0%, #{butler-fn.hex-to-rgb(colors.$blue-dark, 25%)} 30%);
		}
	}
}

// img {
// 	width: 100%;
// 	height: auto;
// }
