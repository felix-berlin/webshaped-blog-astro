---
import SourceSansPro400 from "@fontsource/source-sans-pro/files/source-sans-pro-latin-400-normal.woff2";
import SourceSansPro700 from "@fontsource/source-sans-pro/files/source-sans-pro-latin-700-normal.woff2";
import { pwaInfo } from "virtual:pwa-info";
import { ClientRouter } from "astro:transitions";
import { WEBMENTION_URL } from "astro:env/server";
import SetColorMode from "@components/SetColorMode.astro";
import type { TranslationRoutes } from "@layouts/DefaultLayout.astro";
import StoreSetter from "@components/StoreSetter.vue";

export interface Title {
  title: string;
}

export interface Seo {
  title: string;
  opengraphAuthor?: string;
  opengraphDescription?: string;
  opengraphPublisher?: string;
  opengraphTitle?: string;
  opengraphType?: string;
  opengraphUrl?: string;
  readingTime?: number;
  opengraphSiteName?: string;
  twitterDescription?: string;
  twitterTitle?: string;
  metaRobotsNofollow?: string;
  metaRobotsNoindex?: string;
  canonical?: string;
  metaDesc?: string;
  opengraphPublishedTime?: string;
  opengraphModifiedTime?: string;
  opengraphImage?: {
    sourceUrl: string;
  };
}

export interface SeoProps {
  title: Title;
  seo: Seo;
  lang: "de" | "en";
}

export interface Props {
  title: Title;
  seo: Seo;
  lang: "de" | "en";
  translationsRoutes: TranslationRoutes;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { title, seo, translationsRoutes, lang } = Astro.props;

/**
 * This function creates a localized URL based on slug.
 * @param url - A string (href) that represents the URL to be localized.
 * @param lang  - A string that represents the language code (e.g., "de" or "en").
 * @param translations - An object containing translation routes for different languages.
 */
export function createLocalizedUrl(
  url: string,
  lang: string,
  translations: TranslationRoutes
): string {
  const urlParts = url.split("/");
  const lastPart = urlParts.pop(); // Remove the last part of the URL

  // Replace the language segment (e.g., /de/ or /en/) in the URL
  const updatedUrlParts = urlParts.map((part) => (part === "de" || part === "en" ? lang : part));

  // Append the translated or original last part
  const translatedLastPart = lastPart && translations[lang] ? translations[lang] : lastPart;
  updatedUrlParts.push(translatedLastPart);

  return updatedUrlParts.join("/");
}

const translations = translationsRoutes || {};
const isTaxonomy = translations?.taxonomy === "category";

// Separate taxonomy routes if applicable
// Remove the taxonomy key from translations, this was just for identification
// and not needed in the final routes
const taxonomyRoutes = isTaxonomy ? (({ taxonomy, ...rest }) => rest)(translations) : {};

// Create localized URLs excluding the taxonomy
const otherRoutes = Object.entries(translations).reduce<TranslationRoutes>((acc, [key, value]) => {
  if (key && key !== "undefined") {
    acc[key] = createLocalizedUrl(Astro.url.href, key, translations);
  }
  return acc;
}, {} as TranslationRoutes);

// Determine the full translation routes
const fullTranslationRoutes = isTaxonomy ? taxonomyRoutes : otherRoutes;
---

<StoreSetter locale-routes={fullTranslationRoutes} client:only="vue" />
<SetColorMode />
<ClientRouter />

{pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
<script src="/src/services/pwa.ts"></script>

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />

<!-- Locale -->
{
  Object.entries(fullTranslationRoutes).map(([key, value]) => {
    return <link rel="alternate" hreflang={key} href={value} />;
  })
}
<link rel="alternate" hreflang="x-default" href={fullTranslationRoutes["de"]} />

<!-- Favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#303956" />
<link rel="sitemap" href="/sitemap-index.xml" />
<meta name="msapplication-TileColor" content="#ffffff" />
<meta name="theme-color" content="#ffffff" />
<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->
<title set:text={title} />

{seo?.title && <meta name="title" content={seo.title} />}
{seo?.opengraphDescription && <meta name="description" content={seo.opengraphDescription} />}

<!-- Open Graph / Facebook -->
{seo?.opengraphType && <meta property="og:type" content={seo.opengraphType} />}
{seo?.opengraphUrl && <meta property="og:url" content={seo.opengraphUrl} />}
{seo?.opengraphTitle && <meta property="og:title" content={seo.opengraphTitle} />}
{seo?.opengraphDescription && <meta property="og:description" content={seo.opengraphDescription} />}
{
  seo?.opengraphImage?.sourceUrl && (
    <meta property="og:image" content={seo.opengraphImage.sourceUrl} />
  )
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
{seo?.opengraphUrl && <meta property="twitter:url" content={seo.opengraphUrl} />}
{seo?.twitterTitle && <meta property="twitter:title" content={seo.twitterTitle} />}

{
  seo?.twitterDescription && (
    <meta property="twitter:description" content={seo.twitterDescription} />
  )
}
{
  seo?.opengraphImage?.sourceUrl && (
    <meta property="twitter:image" content={seo.opengraphImage.sourceUrl} />
  )
}

<!-- Webmention -->
<link rel="webmention" href={`${WEBMENTION_URL}/webmention`} />
<link rel="pingback" href={`${WEBMENTION_URL}/xmlrpc`} />
<link rel="preconnect" href="//webmention.io" />

<link rel="preconnect" href="//cms.webshaped.de" />
<link rel="preconnect" href="//analytics.webshaped.de" />

<!-- Preloads -->
<link rel="preload" href={SourceSansPro400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={SourceSansPro700} as="font" type="font/woff2" crossorigin />
