/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "\n  fragment CoreParagraph on CoreParagraph {\n    name\n    attributes {\n      content\n      align\n    }\n  }\n": typeof types.CoreParagraphFragmentDoc;
  "\n  fragment CoreList on CoreList {\n    name\n    innerBlocks {\n      name\n      ... on CoreListItem {\n        attributes {\n          content\n        }\n      }\n    }\n  }\n": typeof types.CoreListFragmentDoc;
  "\n  fragment CoreHeading on CoreHeading {\n    name\n    attributes {\n      align\n      content\n      level\n      textAlign\n    }\n  }\n": typeof types.CoreHeadingFragmentDoc;
  "\n  fragment CoreCode on CoreCode {\n    name\n    attributes {\n      content\n      align\n      className\n    }\n  }\n": typeof types.CoreCodeFragmentDoc;
  "\n  fragment CoreImage on CoreImage {\n    name\n    attributes {\n      align\n      alt\n      aspectRatio\n      caption\n      height\n      id\n      sizeSlug\n      src\n      title\n      width\n    }\n    mediaDetails {\n      sizes {\n        sourceUrl\n        file\n        fileSize\n        height\n        mimeType\n        name\n        width\n      }\n      height\n      width\n    }\n  }\n": typeof types.CoreImageFragmentDoc;
  "\n  fragment CoreButton on CoreButton {\n    name\n    attributes {\n      text\n      type\n      url\n      textAlign\n      title\n      linkTarget\n      rel\n    }\n  }\n": typeof types.CoreButtonFragmentDoc;
  "\n  fragment CoreButtons on CoreButtons {\n    name\n    attributes {\n      align\n    }\n    innerBlocks {\n      ...CoreButton\n    }\n  }\n": typeof types.CoreButtonsFragmentDoc;
  "\n  fragment AcfGithubRawData on AcfGithubRawData {\n    name\n    githubRawData {\n      codeLanguage\n      githubRawUrl\n    }\n  }\n": typeof types.AcfGithubRawDataFragmentDoc;
  "\n  fragment AcfCodeHighlighting on AcfCodeHighlighting {\n    name\n    attributes {\n      data\n    }\n  }\n": typeof types.AcfCodeHighlightingFragmentDoc;
  "\n    fragment CoreDetails on CoreDetails {\n      name\n      attributes {\n        summary\n        showContent\n      }\n      innerBlocks {\n        ...AllBlocks\n      }\n    }\n  ": typeof types.CoreDetailsFragmentDoc;
  "\n  fragment AllBlocks on EditorBlock {\n    ...CoreParagraph\n    ...CoreList\n    ...CoreHeading\n    ...CoreCode\n    ...CoreImage\n    ...CoreButton\n    ...CoreButtons\n    ...AcfGithubRawData\n    ...AcfCodeHighlighting\n  }\n": typeof types.AllBlocksFragmentDoc;
  '\n  mutation CreateComment(\n    $author: String = ""\n    $authorEmail: String = ""\n    $content: String = ""\n    $parent: ID = ""\n    $commentOn: Int = 1\n  ) {\n    createComment(\n      input: {\n        author: $author\n        authorEmail: $authorEmail\n        commentOn: $commentOn\n        content: $content\n        parent: $parent\n      }\n    ) {\n      comment {\n        id\n        content\n        status\n        isRestricted\n        author {\n          node {\n            name\n            email\n          }\n        }\n      }\n      success\n    }\n  }\n': typeof types.CreateCommentDocument;
  "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    canonical\n    metaDesc\n    metaRobotsNofollow\n    metaRobotsNoindex\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n  }\n": typeof types.PostTypeSeoFragmentFragmentDoc;
  "\n  fragment CommentDetails on Comment {\n    content\n    dateGmt\n    id\n    parentId\n    commentId\n    author {\n      node {\n        name\n        id\n        avatar {\n          foundAvatar\n          default\n          height\n          width\n          url\n        }\n      }\n    }\n  }\n": typeof types.CommentDetailsFragmentDoc;
  "fragment TaxonomySEOFragment on TaxonomySEO {\n  title\n  canonical\n  metaDesc\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphSiteName\n  opengraphAuthor\n  opengraphDescription\n  opengraphPublisher\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  opengraphPublishedTime\n  opengraphModifiedTime\n  opengraphImage {\n    sourceUrl\n  }\n  twitterDescription\n  twitterTitle\n}": typeof types.TaxonomySeoFragmentFragmentDoc;
  "fragment CoreParagraph on CoreParagraph {\n  name\n  attributes {\n    content\n    align\n  }\n}\n\nfragment CoreList on CoreList {\n  name\n  innerBlocks {\n    name\n    ... on CoreListItem {\n      attributes {\n        content\n      }\n    }\n  }\n}\n\nfragment CoreHeading on CoreHeading {\n  name\n  attributes {\n    align\n    content\n    level\n    textAlign\n  }\n}\n\nfragment CoreCode on CoreCode {\n  name\n  attributes {\n    content\n    align\n    className\n  }\n}\n\nfragment CoreImage on CoreImage {\n  name\n  attributes {\n    align\n    alt\n    aspectRatio\n    caption\n    height\n    id\n    sizeSlug\n    src\n    title\n    width\n  }\n  mediaDetails {\n    sizes {\n      sourceUrl\n      file\n      fileSize\n      height\n      mimeType\n      name\n      width\n    }\n    height\n    width\n  }\n}\n\nfragment CoreButton on CoreButton {\n  name\n  attributes {\n    text\n    type\n    url\n    textAlign\n    title\n    linkTarget\n    rel\n  }\n}\n\nfragment CoreButtons on CoreButtons {\n  name\n  attributes {\n    align\n  }\n  innerBlocks {\n    ...CoreButton\n  }\n}\n\nfragment AcfGithubRawData on AcfGithubRawData {\n  name\n  githubRawData {\n    codeLanguage\n    githubRawUrl\n  }\n}\n\nfragment AcfCodeHighlighting on AcfCodeHighlighting {\n  name\n  attributes {\n    data\n  }\n}\n\nfragment CoreDetails on CoreDetails {\n  name\n  attributes {\n    summary\n    showContent\n  }\n  innerBlocks {\n    ...AllBlocks\n  }\n}\n\nfragment AllBlocks on EditorBlock {\n  ...CoreParagraph\n  ...CoreList\n  ...CoreHeading\n  ...CoreCode\n  ...CoreImage\n  ...CoreButton\n  ...CoreButtons\n  ...AcfGithubRawData\n  ...AcfCodeHighlighting\n}": typeof types.CoreParagraphFragmentDoc;
  "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        language {\n          code\n          locale\n          name\n        }\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n": typeof types.GetPagesBySlugsDocument;
  "\n  query GetAllPosts(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE, EN]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $size: Int = 96\n  ) {\n    posts(first: $first, where: { languages: $languages, stati: $stati }) {\n      nodes {\n        title\n        slug\n        excerpt\n        dateGmt\n        modifiedGmt\n        content\n        postId\n        id\n        editorBlocks(flat: false) {\n          apiVersion\n          blockEditorCategoryName\n          clientId\n          name\n          parentClientId\n          type\n          ...CoreDetails\n          ...AllBlocks\n        }\n        author {\n          node {\n            avatar(size: $size) {\n              foundAvatar\n              height\n              url\n              width\n            }\n            email\n            firstName\n            lastName\n            description\n            id\n            seo {\n              social {\n                facebook\n                instagram\n                linkedIn\n                mySpace\n                pinterest\n                soundCloud\n                twitter\n                wikipedia\n                youTube\n              }\n            }\n            socialAdvanced {\n              github\n              mastodon\n            }\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mimeType\n            mediaDetails {\n              height\n              width\n              sizes {\n                width\n                sourceUrl\n                mimeType\n              }\n            }\n          }\n        }\n        categories {\n          edges {\n            node {\n              name\n              slug\n              parent {\n                node {\n                  name\n                  slug\n                }\n              }\n              children {\n                edges {\n                  node {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        commentCount\n        commentStatus\n        comments(\n          first: 100\n          where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT, parent: 0 }\n        ) {\n          nodes {\n            ...CommentDetails\n            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n              nodes {\n                ...CommentDetails\n                replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                  nodes {\n                    ...CommentDetails\n                    replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                      nodes {\n                        ...CommentDetails\n                        replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                          nodes {\n                            ...CommentDetails\n                            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                              nodes {\n                                ...CommentDetails\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        seo {\n          title\n          readingTime\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n        translations {\n          slug\n          language {\n            slug\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetAllPostsDocument;
  "\n  query GetPostsPreview(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $field: PostObjectsConnectionOrderbyEnum = AUTHOR\n    $order: OrderEnum = ASC\n  ) {\n    posts(\n      first: $first\n      where: { languages: $languages, stati: $stati, orderby: { field: $field, order: $order } }\n    ) {\n      nodes {\n        dateGmt\n        modifiedGmt\n        slug\n        commentCount\n        excerpt\n        title\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        translations {\n          slug\n          language {\n            code\n            locale\n            name\n            slug\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mediaDetails {\n              height\n              width\n            }\n          }\n        }\n        seo {\n          readingTime\n        }\n      }\n    }\n  }\n": typeof types.GetPostsPreviewDocument;
  "\n  query GetAllPostPreviewsByCategory(\n    $exclude: [ID] = [1] # Allgemein\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n    $stati: [PostStatusEnum] = [PUBLISH]\n  ) {\n    categories(where: { exclude: $exclude }) {\n      nodes {\n        count\n        name\n        slug\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        children {\n          nodes {\n            count\n            name\n            slug\n            children {\n              nodes {\n                count\n                name\n                slug\n                id\n              }\n            }\n          }\n        }\n        posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n          nodes {\n            title\n            excerpt\n            language {\n              code\n              locale\n              name\n              slug\n            }\n            slug\n          }\n        }\n        translations {\n          name\n          slug\n          posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n            nodes {\n              title\n              excerpt\n              language {\n                code\n                locale\n                name\n                slug\n              }\n              slug\n            }\n          }\n          language {\n            slug\n          }\n        }\n        seo {\n          title\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n      }\n    }\n  }\n": typeof types.GetAllPostPreviewsByCategoryDocument;
  'mutation CreateComment($author: String = "", $authorEmail: String = "", $content: String = "", $parent: ID = "", $commentOn: Int = 1) {\n  createComment(\n    input: {author: $author, authorEmail: $authorEmail, commentOn: $commentOn, content: $content, parent: $parent}\n  ) {\n    comment {\n      id\n      content\n      status\n      isRestricted\n      author {\n        node {\n          name\n          email\n        }\n      }\n    }\n    success\n  }\n}': typeof types.CreateCommentDocument;
  'query GetAuthor($id: ID = "1", $idType: UserNodeIdTypeEnum = DATABASE_ID) {\n  user(id: $id, idType: $idType) {\n    seo {\n      social {\n        facebook\n        instagram\n        linkedIn\n        mySpace\n        pinterest\n        soundCloud\n        twitter\n        wikipedia\n        youTube\n      }\n    }\n    socialAdvanced {\n      github\n      mastodon\n    }\n  }\n}': typeof types.GetAuthorDocument;
  'query GetCategoryBySlug($first: Int = 1000, $slug: [String] = "") {\n  categories(first: $first, where: {slug: $slug}) {\n    nodes {\n      name\n      slug\n      count\n      language {\n        code\n        locale\n        name\n        slug\n      }\n      seo {\n        title\n        canonical\n        metaDesc\n        metaRobotsNofollow\n        metaRobotsNoindex\n        opengraphSiteName\n        opengraphAuthor\n        opengraphDescription\n        opengraphPublisher\n        opengraphTitle\n        opengraphType\n        opengraphUrl\n        opengraphPublishedTime\n        opengraphModifiedTime\n        opengraphImage {\n          sourceUrl\n        }\n        twitterDescription\n        twitterTitle\n      }\n    }\n  }\n}\n\nquery GetAllCategories($first: Int = 1000, $hideEmpty: Boolean = true, $languages: [LanguageCodeEnum!] = [DE, EN], $orderby: TermObjectsConnectionOrderbyEnum = NAME, $exclude: [ID] = [1, 96]) {\n  categories(\n    first: $first\n    where: {exclude: $exclude, orderby: $orderby, hideEmpty: $hideEmpty, languages: $languages}\n  ) {\n    nodes {\n      ...CategoryFields\n      children {\n        nodes {\n          ...CategoryFields\n          children {\n            nodes {\n              ...CategoryFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on Category {\n  count\n  name\n  slug\n  language {\n    code\n    slug\n    locale\n  }\n}': typeof types.GetCategoryBySlugDocument;
  'query GetCommentsById($contentId: ID = "", $contentStatus: [PostStatusEnum] = PUBLISH, $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT, $first: Int = 10, $after: String = "") {\n  comments(\n    where: {contentId: $contentId, contentStatus: $contentStatus, orderby: $orderby}\n    first: $first\n    after: $after\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        ...CommentFields\n        replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n          nodes {\n            ...CommentFields\n            replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n              nodes {\n                ...CommentFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  content\n  dateGmt\n  id\n  parentId\n  commentId\n  author {\n    node {\n      name\n      id\n      avatar {\n        foundAvatar\n        height\n        width\n        url\n      }\n    }\n  }\n}': typeof types.GetCommentsByIdDocument;
  'query GetPrimaryMenu {\n  menus(where: {location: PRIMARY_MENU}) {\n    nodes {\n      menuItems {\n        edges {\n          node {\n            ...MenuItemFields\n            connectedNode {\n              node {\n                ... on Page {\n                  isPostsPage\n                  slug\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuById($id: ID = "") {\n  menu(id: $id, idType: DATABASE_ID) {\n    menuItems(where: {parentDatabaseId: 0}) {\n      nodes {\n        ...MenuItemFields\n        childItems {\n          nodes {\n            ...MenuItemFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuItems($language: LanguageCodeFilterEnum = ALL, $location: MenuLocationEnum = PRIMARY_MENU) {\n  menuItems(\n    where: {language: $language, location: $location, parentDatabaseId: 0}\n  ) {\n    nodes {\n      ...MenuItemFields\n      childItems {\n        nodes {\n          ...MenuItemFields\n        }\n      }\n    }\n  }\n}\n\nfragment MenuItemFields on MenuItem {\n  label\n  order\n  path\n}': typeof types.GetPrimaryMenuDocument;
};
const documents: Documents = {
  "\n  fragment CoreParagraph on CoreParagraph {\n    name\n    attributes {\n      content\n      align\n    }\n  }\n":
    types.CoreParagraphFragmentDoc,
  "\n  fragment CoreList on CoreList {\n    name\n    innerBlocks {\n      name\n      ... on CoreListItem {\n        attributes {\n          content\n        }\n      }\n    }\n  }\n":
    types.CoreListFragmentDoc,
  "\n  fragment CoreHeading on CoreHeading {\n    name\n    attributes {\n      align\n      content\n      level\n      textAlign\n    }\n  }\n":
    types.CoreHeadingFragmentDoc,
  "\n  fragment CoreCode on CoreCode {\n    name\n    attributes {\n      content\n      align\n      className\n    }\n  }\n":
    types.CoreCodeFragmentDoc,
  "\n  fragment CoreImage on CoreImage {\n    name\n    attributes {\n      align\n      alt\n      aspectRatio\n      caption\n      height\n      id\n      sizeSlug\n      src\n      title\n      width\n    }\n    mediaDetails {\n      sizes {\n        sourceUrl\n        file\n        fileSize\n        height\n        mimeType\n        name\n        width\n      }\n      height\n      width\n    }\n  }\n":
    types.CoreImageFragmentDoc,
  "\n  fragment CoreButton on CoreButton {\n    name\n    attributes {\n      text\n      type\n      url\n      textAlign\n      title\n      linkTarget\n      rel\n    }\n  }\n":
    types.CoreButtonFragmentDoc,
  "\n  fragment CoreButtons on CoreButtons {\n    name\n    attributes {\n      align\n    }\n    innerBlocks {\n      ...CoreButton\n    }\n  }\n":
    types.CoreButtonsFragmentDoc,
  "\n  fragment AcfGithubRawData on AcfGithubRawData {\n    name\n    githubRawData {\n      codeLanguage\n      githubRawUrl\n    }\n  }\n":
    types.AcfGithubRawDataFragmentDoc,
  "\n  fragment AcfCodeHighlighting on AcfCodeHighlighting {\n    name\n    attributes {\n      data\n    }\n  }\n":
    types.AcfCodeHighlightingFragmentDoc,
  "\n    fragment CoreDetails on CoreDetails {\n      name\n      attributes {\n        summary\n        showContent\n      }\n      innerBlocks {\n        ...AllBlocks\n      }\n    }\n  ":
    types.CoreDetailsFragmentDoc,
  "\n  fragment AllBlocks on EditorBlock {\n    ...CoreParagraph\n    ...CoreList\n    ...CoreHeading\n    ...CoreCode\n    ...CoreImage\n    ...CoreButton\n    ...CoreButtons\n    ...AcfGithubRawData\n    ...AcfCodeHighlighting\n  }\n":
    types.AllBlocksFragmentDoc,
  '\n  mutation CreateComment(\n    $author: String = ""\n    $authorEmail: String = ""\n    $content: String = ""\n    $parent: ID = ""\n    $commentOn: Int = 1\n  ) {\n    createComment(\n      input: {\n        author: $author\n        authorEmail: $authorEmail\n        commentOn: $commentOn\n        content: $content\n        parent: $parent\n      }\n    ) {\n      comment {\n        id\n        content\n        status\n        isRestricted\n        author {\n          node {\n            name\n            email\n          }\n        }\n      }\n      success\n    }\n  }\n':
    types.CreateCommentDocument,
  "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    canonical\n    metaDesc\n    metaRobotsNofollow\n    metaRobotsNoindex\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n  }\n":
    types.PostTypeSeoFragmentFragmentDoc,
  "\n  fragment CommentDetails on Comment {\n    content\n    dateGmt\n    id\n    parentId\n    commentId\n    author {\n      node {\n        name\n        id\n        avatar {\n          foundAvatar\n          default\n          height\n          width\n          url\n        }\n      }\n    }\n  }\n":
    types.CommentDetailsFragmentDoc,
  "fragment TaxonomySEOFragment on TaxonomySEO {\n  title\n  canonical\n  metaDesc\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphSiteName\n  opengraphAuthor\n  opengraphDescription\n  opengraphPublisher\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  opengraphPublishedTime\n  opengraphModifiedTime\n  opengraphImage {\n    sourceUrl\n  }\n  twitterDescription\n  twitterTitle\n}":
    types.TaxonomySeoFragmentFragmentDoc,
  "fragment CoreParagraph on CoreParagraph {\n  name\n  attributes {\n    content\n    align\n  }\n}\n\nfragment CoreList on CoreList {\n  name\n  innerBlocks {\n    name\n    ... on CoreListItem {\n      attributes {\n        content\n      }\n    }\n  }\n}\n\nfragment CoreHeading on CoreHeading {\n  name\n  attributes {\n    align\n    content\n    level\n    textAlign\n  }\n}\n\nfragment CoreCode on CoreCode {\n  name\n  attributes {\n    content\n    align\n    className\n  }\n}\n\nfragment CoreImage on CoreImage {\n  name\n  attributes {\n    align\n    alt\n    aspectRatio\n    caption\n    height\n    id\n    sizeSlug\n    src\n    title\n    width\n  }\n  mediaDetails {\n    sizes {\n      sourceUrl\n      file\n      fileSize\n      height\n      mimeType\n      name\n      width\n    }\n    height\n    width\n  }\n}\n\nfragment CoreButton on CoreButton {\n  name\n  attributes {\n    text\n    type\n    url\n    textAlign\n    title\n    linkTarget\n    rel\n  }\n}\n\nfragment CoreButtons on CoreButtons {\n  name\n  attributes {\n    align\n  }\n  innerBlocks {\n    ...CoreButton\n  }\n}\n\nfragment AcfGithubRawData on AcfGithubRawData {\n  name\n  githubRawData {\n    codeLanguage\n    githubRawUrl\n  }\n}\n\nfragment AcfCodeHighlighting on AcfCodeHighlighting {\n  name\n  attributes {\n    data\n  }\n}\n\nfragment CoreDetails on CoreDetails {\n  name\n  attributes {\n    summary\n    showContent\n  }\n  innerBlocks {\n    ...AllBlocks\n  }\n}\n\nfragment AllBlocks on EditorBlock {\n  ...CoreParagraph\n  ...CoreList\n  ...CoreHeading\n  ...CoreCode\n  ...CoreImage\n  ...CoreButton\n  ...CoreButtons\n  ...AcfGithubRawData\n  ...AcfCodeHighlighting\n}":
    types.CoreParagraphFragmentDoc,
  "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        language {\n          code\n          locale\n          name\n        }\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n":
    types.GetPagesBySlugsDocument,
  "\n  query GetAllPosts(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE, EN]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $size: Int = 96\n  ) {\n    posts(first: $first, where: { languages: $languages, stati: $stati }) {\n      nodes {\n        title\n        slug\n        excerpt\n        dateGmt\n        modifiedGmt\n        content\n        postId\n        id\n        editorBlocks(flat: false) {\n          apiVersion\n          blockEditorCategoryName\n          clientId\n          name\n          parentClientId\n          type\n          ...CoreDetails\n          ...AllBlocks\n        }\n        author {\n          node {\n            avatar(size: $size) {\n              foundAvatar\n              height\n              url\n              width\n            }\n            email\n            firstName\n            lastName\n            description\n            id\n            seo {\n              social {\n                facebook\n                instagram\n                linkedIn\n                mySpace\n                pinterest\n                soundCloud\n                twitter\n                wikipedia\n                youTube\n              }\n            }\n            socialAdvanced {\n              github\n              mastodon\n            }\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mimeType\n            mediaDetails {\n              height\n              width\n              sizes {\n                width\n                sourceUrl\n                mimeType\n              }\n            }\n          }\n        }\n        categories {\n          edges {\n            node {\n              name\n              slug\n              parent {\n                node {\n                  name\n                  slug\n                }\n              }\n              children {\n                edges {\n                  node {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        commentCount\n        commentStatus\n        comments(\n          first: 100\n          where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT, parent: 0 }\n        ) {\n          nodes {\n            ...CommentDetails\n            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n              nodes {\n                ...CommentDetails\n                replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                  nodes {\n                    ...CommentDetails\n                    replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                      nodes {\n                        ...CommentDetails\n                        replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                          nodes {\n                            ...CommentDetails\n                            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                              nodes {\n                                ...CommentDetails\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        seo {\n          title\n          readingTime\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n        translations {\n          slug\n          language {\n            slug\n            name\n          }\n        }\n      }\n    }\n  }\n":
    types.GetAllPostsDocument,
  "\n  query GetPostsPreview(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $field: PostObjectsConnectionOrderbyEnum = AUTHOR\n    $order: OrderEnum = ASC\n  ) {\n    posts(\n      first: $first\n      where: { languages: $languages, stati: $stati, orderby: { field: $field, order: $order } }\n    ) {\n      nodes {\n        dateGmt\n        modifiedGmt\n        slug\n        commentCount\n        excerpt\n        title\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        translations {\n          slug\n          language {\n            code\n            locale\n            name\n            slug\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mediaDetails {\n              height\n              width\n            }\n          }\n        }\n        seo {\n          readingTime\n        }\n      }\n    }\n  }\n":
    types.GetPostsPreviewDocument,
  "\n  query GetAllPostPreviewsByCategory(\n    $exclude: [ID] = [1] # Allgemein\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n    $stati: [PostStatusEnum] = [PUBLISH]\n  ) {\n    categories(where: { exclude: $exclude }) {\n      nodes {\n        count\n        name\n        slug\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        children {\n          nodes {\n            count\n            name\n            slug\n            children {\n              nodes {\n                count\n                name\n                slug\n                id\n              }\n            }\n          }\n        }\n        posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n          nodes {\n            title\n            excerpt\n            language {\n              code\n              locale\n              name\n              slug\n            }\n            slug\n          }\n        }\n        translations {\n          name\n          slug\n          posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n            nodes {\n              title\n              excerpt\n              language {\n                code\n                locale\n                name\n                slug\n              }\n              slug\n            }\n          }\n          language {\n            slug\n          }\n        }\n        seo {\n          title\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n      }\n    }\n  }\n":
    types.GetAllPostPreviewsByCategoryDocument,
  'mutation CreateComment($author: String = "", $authorEmail: String = "", $content: String = "", $parent: ID = "", $commentOn: Int = 1) {\n  createComment(\n    input: {author: $author, authorEmail: $authorEmail, commentOn: $commentOn, content: $content, parent: $parent}\n  ) {\n    comment {\n      id\n      content\n      status\n      isRestricted\n      author {\n        node {\n          name\n          email\n        }\n      }\n    }\n    success\n  }\n}':
    types.CreateCommentDocument,
  'query GetAuthor($id: ID = "1", $idType: UserNodeIdTypeEnum = DATABASE_ID) {\n  user(id: $id, idType: $idType) {\n    seo {\n      social {\n        facebook\n        instagram\n        linkedIn\n        mySpace\n        pinterest\n        soundCloud\n        twitter\n        wikipedia\n        youTube\n      }\n    }\n    socialAdvanced {\n      github\n      mastodon\n    }\n  }\n}':
    types.GetAuthorDocument,
  'query GetCategoryBySlug($first: Int = 1000, $slug: [String] = "") {\n  categories(first: $first, where: {slug: $slug}) {\n    nodes {\n      name\n      slug\n      count\n      language {\n        code\n        locale\n        name\n        slug\n      }\n      seo {\n        title\n        canonical\n        metaDesc\n        metaRobotsNofollow\n        metaRobotsNoindex\n        opengraphSiteName\n        opengraphAuthor\n        opengraphDescription\n        opengraphPublisher\n        opengraphTitle\n        opengraphType\n        opengraphUrl\n        opengraphPublishedTime\n        opengraphModifiedTime\n        opengraphImage {\n          sourceUrl\n        }\n        twitterDescription\n        twitterTitle\n      }\n    }\n  }\n}\n\nquery GetAllCategories($first: Int = 1000, $hideEmpty: Boolean = true, $languages: [LanguageCodeEnum!] = [DE, EN], $orderby: TermObjectsConnectionOrderbyEnum = NAME, $exclude: [ID] = [1, 96]) {\n  categories(\n    first: $first\n    where: {exclude: $exclude, orderby: $orderby, hideEmpty: $hideEmpty, languages: $languages}\n  ) {\n    nodes {\n      ...CategoryFields\n      children {\n        nodes {\n          ...CategoryFields\n          children {\n            nodes {\n              ...CategoryFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on Category {\n  count\n  name\n  slug\n  language {\n    code\n    slug\n    locale\n  }\n}':
    types.GetCategoryBySlugDocument,
  'query GetCommentsById($contentId: ID = "", $contentStatus: [PostStatusEnum] = PUBLISH, $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT, $first: Int = 10, $after: String = "") {\n  comments(\n    where: {contentId: $contentId, contentStatus: $contentStatus, orderby: $orderby}\n    first: $first\n    after: $after\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        ...CommentFields\n        replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n          nodes {\n            ...CommentFields\n            replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n              nodes {\n                ...CommentFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  content\n  dateGmt\n  id\n  parentId\n  commentId\n  author {\n    node {\n      name\n      id\n      avatar {\n        foundAvatar\n        height\n        width\n        url\n      }\n    }\n  }\n}':
    types.GetCommentsByIdDocument,
  'query GetPrimaryMenu {\n  menus(where: {location: PRIMARY_MENU}) {\n    nodes {\n      menuItems {\n        edges {\n          node {\n            ...MenuItemFields\n            connectedNode {\n              node {\n                ... on Page {\n                  isPostsPage\n                  slug\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuById($id: ID = "") {\n  menu(id: $id, idType: DATABASE_ID) {\n    menuItems(where: {parentDatabaseId: 0}) {\n      nodes {\n        ...MenuItemFields\n        childItems {\n          nodes {\n            ...MenuItemFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuItems($language: LanguageCodeFilterEnum = ALL, $location: MenuLocationEnum = PRIMARY_MENU) {\n  menuItems(\n    where: {language: $language, location: $location, parentDatabaseId: 0}\n  ) {\n    nodes {\n      ...MenuItemFields\n      childItems {\n        nodes {\n          ...MenuItemFields\n        }\n      }\n    }\n  }\n}\n\nfragment MenuItemFields on MenuItem {\n  label\n  order\n  path\n}':
    types.GetPrimaryMenuDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreParagraph on CoreParagraph {\n    name\n    attributes {\n      content\n      align\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreParagraph on CoreParagraph {\n    name\n    attributes {\n      content\n      align\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreList on CoreList {\n    name\n    innerBlocks {\n      name\n      ... on CoreListItem {\n        attributes {\n          content\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreList on CoreList {\n    name\n    innerBlocks {\n      name\n      ... on CoreListItem {\n        attributes {\n          content\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreHeading on CoreHeading {\n    name\n    attributes {\n      align\n      content\n      level\n      textAlign\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreHeading on CoreHeading {\n    name\n    attributes {\n      align\n      content\n      level\n      textAlign\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreCode on CoreCode {\n    name\n    attributes {\n      content\n      align\n      className\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreCode on CoreCode {\n    name\n    attributes {\n      content\n      align\n      className\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreImage on CoreImage {\n    name\n    attributes {\n      align\n      alt\n      aspectRatio\n      caption\n      height\n      id\n      sizeSlug\n      src\n      title\n      width\n    }\n    mediaDetails {\n      sizes {\n        sourceUrl\n        file\n        fileSize\n        height\n        mimeType\n        name\n        width\n      }\n      height\n      width\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreImage on CoreImage {\n    name\n    attributes {\n      align\n      alt\n      aspectRatio\n      caption\n      height\n      id\n      sizeSlug\n      src\n      title\n      width\n    }\n    mediaDetails {\n      sizes {\n        sourceUrl\n        file\n        fileSize\n        height\n        mimeType\n        name\n        width\n      }\n      height\n      width\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreButton on CoreButton {\n    name\n    attributes {\n      text\n      type\n      url\n      textAlign\n      title\n      linkTarget\n      rel\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreButton on CoreButton {\n    name\n    attributes {\n      text\n      type\n      url\n      textAlign\n      title\n      linkTarget\n      rel\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CoreButtons on CoreButtons {\n    name\n    attributes {\n      align\n    }\n    innerBlocks {\n      ...CoreButton\n    }\n  }\n",
): (typeof documents)["\n  fragment CoreButtons on CoreButtons {\n    name\n    attributes {\n      align\n    }\n    innerBlocks {\n      ...CoreButton\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment AcfGithubRawData on AcfGithubRawData {\n    name\n    githubRawData {\n      codeLanguage\n      githubRawUrl\n    }\n  }\n",
): (typeof documents)["\n  fragment AcfGithubRawData on AcfGithubRawData {\n    name\n    githubRawData {\n      codeLanguage\n      githubRawUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment AcfCodeHighlighting on AcfCodeHighlighting {\n    name\n    attributes {\n      data\n    }\n  }\n",
): (typeof documents)["\n  fragment AcfCodeHighlighting on AcfCodeHighlighting {\n    name\n    attributes {\n      data\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    fragment CoreDetails on CoreDetails {\n      name\n      attributes {\n        summary\n        showContent\n      }\n      innerBlocks {\n        ...AllBlocks\n      }\n    }\n  ",
): (typeof documents)["\n    fragment CoreDetails on CoreDetails {\n      name\n      attributes {\n        summary\n        showContent\n      }\n      innerBlocks {\n        ...AllBlocks\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment AllBlocks on EditorBlock {\n    ...CoreParagraph\n    ...CoreList\n    ...CoreHeading\n    ...CoreCode\n    ...CoreImage\n    ...CoreButton\n    ...CoreButtons\n    ...AcfGithubRawData\n    ...AcfCodeHighlighting\n  }\n",
): (typeof documents)["\n  fragment AllBlocks on EditorBlock {\n    ...CoreParagraph\n    ...CoreList\n    ...CoreHeading\n    ...CoreCode\n    ...CoreImage\n    ...CoreButton\n    ...CoreButtons\n    ...AcfGithubRawData\n    ...AcfCodeHighlighting\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation CreateComment(\n    $author: String = ""\n    $authorEmail: String = ""\n    $content: String = ""\n    $parent: ID = ""\n    $commentOn: Int = 1\n  ) {\n    createComment(\n      input: {\n        author: $author\n        authorEmail: $authorEmail\n        commentOn: $commentOn\n        content: $content\n        parent: $parent\n      }\n    ) {\n      comment {\n        id\n        content\n        status\n        isRestricted\n        author {\n          node {\n            name\n            email\n          }\n        }\n      }\n      success\n    }\n  }\n',
): (typeof documents)['\n  mutation CreateComment(\n    $author: String = ""\n    $authorEmail: String = ""\n    $content: String = ""\n    $parent: ID = ""\n    $commentOn: Int = 1\n  ) {\n    createComment(\n      input: {\n        author: $author\n        authorEmail: $authorEmail\n        commentOn: $commentOn\n        content: $content\n        parent: $parent\n      }\n    ) {\n      comment {\n        id\n        content\n        status\n        isRestricted\n        author {\n          node {\n            name\n            email\n          }\n        }\n      }\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    canonical\n    metaDesc\n    metaRobotsNofollow\n    metaRobotsNoindex\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n  }\n",
): (typeof documents)["\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    canonical\n    metaDesc\n    metaRobotsNofollow\n    metaRobotsNoindex\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment CommentDetails on Comment {\n    content\n    dateGmt\n    id\n    parentId\n    commentId\n    author {\n      node {\n        name\n        id\n        avatar {\n          foundAvatar\n          default\n          height\n          width\n          url\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  fragment CommentDetails on Comment {\n    content\n    dateGmt\n    id\n    parentId\n    commentId\n    author {\n      node {\n        name\n        id\n        avatar {\n          foundAvatar\n          default\n          height\n          width\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment TaxonomySEOFragment on TaxonomySEO {\n  title\n  canonical\n  metaDesc\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphSiteName\n  opengraphAuthor\n  opengraphDescription\n  opengraphPublisher\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  opengraphPublishedTime\n  opengraphModifiedTime\n  opengraphImage {\n    sourceUrl\n  }\n  twitterDescription\n  twitterTitle\n}",
): (typeof documents)["fragment TaxonomySEOFragment on TaxonomySEO {\n  title\n  canonical\n  metaDesc\n  metaRobotsNofollow\n  metaRobotsNoindex\n  opengraphSiteName\n  opengraphAuthor\n  opengraphDescription\n  opengraphPublisher\n  opengraphTitle\n  opengraphType\n  opengraphUrl\n  opengraphPublishedTime\n  opengraphModifiedTime\n  opengraphImage {\n    sourceUrl\n  }\n  twitterDescription\n  twitterTitle\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CoreParagraph on CoreParagraph {\n  name\n  attributes {\n    content\n    align\n  }\n}\n\nfragment CoreList on CoreList {\n  name\n  innerBlocks {\n    name\n    ... on CoreListItem {\n      attributes {\n        content\n      }\n    }\n  }\n}\n\nfragment CoreHeading on CoreHeading {\n  name\n  attributes {\n    align\n    content\n    level\n    textAlign\n  }\n}\n\nfragment CoreCode on CoreCode {\n  name\n  attributes {\n    content\n    align\n    className\n  }\n}\n\nfragment CoreImage on CoreImage {\n  name\n  attributes {\n    align\n    alt\n    aspectRatio\n    caption\n    height\n    id\n    sizeSlug\n    src\n    title\n    width\n  }\n  mediaDetails {\n    sizes {\n      sourceUrl\n      file\n      fileSize\n      height\n      mimeType\n      name\n      width\n    }\n    height\n    width\n  }\n}\n\nfragment CoreButton on CoreButton {\n  name\n  attributes {\n    text\n    type\n    url\n    textAlign\n    title\n    linkTarget\n    rel\n  }\n}\n\nfragment CoreButtons on CoreButtons {\n  name\n  attributes {\n    align\n  }\n  innerBlocks {\n    ...CoreButton\n  }\n}\n\nfragment AcfGithubRawData on AcfGithubRawData {\n  name\n  githubRawData {\n    codeLanguage\n    githubRawUrl\n  }\n}\n\nfragment AcfCodeHighlighting on AcfCodeHighlighting {\n  name\n  attributes {\n    data\n  }\n}\n\nfragment CoreDetails on CoreDetails {\n  name\n  attributes {\n    summary\n    showContent\n  }\n  innerBlocks {\n    ...AllBlocks\n  }\n}\n\nfragment AllBlocks on EditorBlock {\n  ...CoreParagraph\n  ...CoreList\n  ...CoreHeading\n  ...CoreCode\n  ...CoreImage\n  ...CoreButton\n  ...CoreButtons\n  ...AcfGithubRawData\n  ...AcfCodeHighlighting\n}",
): (typeof documents)["fragment CoreParagraph on CoreParagraph {\n  name\n  attributes {\n    content\n    align\n  }\n}\n\nfragment CoreList on CoreList {\n  name\n  innerBlocks {\n    name\n    ... on CoreListItem {\n      attributes {\n        content\n      }\n    }\n  }\n}\n\nfragment CoreHeading on CoreHeading {\n  name\n  attributes {\n    align\n    content\n    level\n    textAlign\n  }\n}\n\nfragment CoreCode on CoreCode {\n  name\n  attributes {\n    content\n    align\n    className\n  }\n}\n\nfragment CoreImage on CoreImage {\n  name\n  attributes {\n    align\n    alt\n    aspectRatio\n    caption\n    height\n    id\n    sizeSlug\n    src\n    title\n    width\n  }\n  mediaDetails {\n    sizes {\n      sourceUrl\n      file\n      fileSize\n      height\n      mimeType\n      name\n      width\n    }\n    height\n    width\n  }\n}\n\nfragment CoreButton on CoreButton {\n  name\n  attributes {\n    text\n    type\n    url\n    textAlign\n    title\n    linkTarget\n    rel\n  }\n}\n\nfragment CoreButtons on CoreButtons {\n  name\n  attributes {\n    align\n  }\n  innerBlocks {\n    ...CoreButton\n  }\n}\n\nfragment AcfGithubRawData on AcfGithubRawData {\n  name\n  githubRawData {\n    codeLanguage\n    githubRawUrl\n  }\n}\n\nfragment AcfCodeHighlighting on AcfCodeHighlighting {\n  name\n  attributes {\n    data\n  }\n}\n\nfragment CoreDetails on CoreDetails {\n  name\n  attributes {\n    summary\n    showContent\n  }\n  innerBlocks {\n    ...AllBlocks\n  }\n}\n\nfragment AllBlocks on EditorBlock {\n  ...CoreParagraph\n  ...CoreList\n  ...CoreHeading\n  ...CoreCode\n  ...CoreImage\n  ...CoreButton\n  ...CoreButtons\n  ...AcfGithubRawData\n  ...AcfCodeHighlighting\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        language {\n          code\n          locale\n          name\n        }\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        language {\n          code\n          locale\n          name\n        }\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetAllPosts(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE, EN]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $size: Int = 96\n  ) {\n    posts(first: $first, where: { languages: $languages, stati: $stati }) {\n      nodes {\n        title\n        slug\n        excerpt\n        dateGmt\n        modifiedGmt\n        content\n        postId\n        id\n        editorBlocks(flat: false) {\n          apiVersion\n          blockEditorCategoryName\n          clientId\n          name\n          parentClientId\n          type\n          ...CoreDetails\n          ...AllBlocks\n        }\n        author {\n          node {\n            avatar(size: $size) {\n              foundAvatar\n              height\n              url\n              width\n            }\n            email\n            firstName\n            lastName\n            description\n            id\n            seo {\n              social {\n                facebook\n                instagram\n                linkedIn\n                mySpace\n                pinterest\n                soundCloud\n                twitter\n                wikipedia\n                youTube\n              }\n            }\n            socialAdvanced {\n              github\n              mastodon\n            }\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mimeType\n            mediaDetails {\n              height\n              width\n              sizes {\n                width\n                sourceUrl\n                mimeType\n              }\n            }\n          }\n        }\n        categories {\n          edges {\n            node {\n              name\n              slug\n              parent {\n                node {\n                  name\n                  slug\n                }\n              }\n              children {\n                edges {\n                  node {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        commentCount\n        commentStatus\n        comments(\n          first: 100\n          where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT, parent: 0 }\n        ) {\n          nodes {\n            ...CommentDetails\n            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n              nodes {\n                ...CommentDetails\n                replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                  nodes {\n                    ...CommentDetails\n                    replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                      nodes {\n                        ...CommentDetails\n                        replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                          nodes {\n                            ...CommentDetails\n                            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                              nodes {\n                                ...CommentDetails\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        seo {\n          title\n          readingTime\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n        translations {\n          slug\n          language {\n            slug\n            name\n          }\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetAllPosts(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE, EN]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $size: Int = 96\n  ) {\n    posts(first: $first, where: { languages: $languages, stati: $stati }) {\n      nodes {\n        title\n        slug\n        excerpt\n        dateGmt\n        modifiedGmt\n        content\n        postId\n        id\n        editorBlocks(flat: false) {\n          apiVersion\n          blockEditorCategoryName\n          clientId\n          name\n          parentClientId\n          type\n          ...CoreDetails\n          ...AllBlocks\n        }\n        author {\n          node {\n            avatar(size: $size) {\n              foundAvatar\n              height\n              url\n              width\n            }\n            email\n            firstName\n            lastName\n            description\n            id\n            seo {\n              social {\n                facebook\n                instagram\n                linkedIn\n                mySpace\n                pinterest\n                soundCloud\n                twitter\n                wikipedia\n                youTube\n              }\n            }\n            socialAdvanced {\n              github\n              mastodon\n            }\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mimeType\n            mediaDetails {\n              height\n              width\n              sizes {\n                width\n                sourceUrl\n                mimeType\n              }\n            }\n          }\n        }\n        categories {\n          edges {\n            node {\n              name\n              slug\n              parent {\n                node {\n                  name\n                  slug\n                }\n              }\n              children {\n                edges {\n                  node {\n                    name\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        }\n        commentCount\n        commentStatus\n        comments(\n          first: 100\n          where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT, parent: 0 }\n        ) {\n          nodes {\n            ...CommentDetails\n            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n              nodes {\n                ...CommentDetails\n                replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                  nodes {\n                    ...CommentDetails\n                    replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                      nodes {\n                        ...CommentDetails\n                        replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                          nodes {\n                            ...CommentDetails\n                            replies(where: { contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT }) {\n                              nodes {\n                                ...CommentDetails\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        seo {\n          title\n          readingTime\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n        translations {\n          slug\n          language {\n            slug\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPostsPreview(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $field: PostObjectsConnectionOrderbyEnum = AUTHOR\n    $order: OrderEnum = ASC\n  ) {\n    posts(\n      first: $first\n      where: { languages: $languages, stati: $stati, orderby: { field: $field, order: $order } }\n    ) {\n      nodes {\n        dateGmt\n        modifiedGmt\n        slug\n        commentCount\n        excerpt\n        title\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        translations {\n          slug\n          language {\n            code\n            locale\n            name\n            slug\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mediaDetails {\n              height\n              width\n            }\n          }\n        }\n        seo {\n          readingTime\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetPostsPreview(\n    $first: Int = 10000\n    $languages: [LanguageCodeEnum!] = [DE]\n    $stati: [PostStatusEnum] = [PUBLISH]\n    $field: PostObjectsConnectionOrderbyEnum = AUTHOR\n    $order: OrderEnum = ASC\n  ) {\n    posts(\n      first: $first\n      where: { languages: $languages, stati: $stati, orderby: { field: $field, order: $order } }\n    ) {\n      nodes {\n        dateGmt\n        modifiedGmt\n        slug\n        commentCount\n        excerpt\n        title\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        translations {\n          slug\n          language {\n            code\n            locale\n            name\n            slug\n          }\n        }\n        featuredImage {\n          node {\n            altText\n            mediaItemUrl\n            srcSet\n            sizes\n            mediaDetails {\n              height\n              width\n            }\n          }\n        }\n        seo {\n          readingTime\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetAllPostPreviewsByCategory(\n    $exclude: [ID] = [1] # Allgemein\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n    $stati: [PostStatusEnum] = [PUBLISH]\n  ) {\n    categories(where: { exclude: $exclude }) {\n      nodes {\n        count\n        name\n        slug\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        children {\n          nodes {\n            count\n            name\n            slug\n            children {\n              nodes {\n                count\n                name\n                slug\n                id\n              }\n            }\n          }\n        }\n        posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n          nodes {\n            title\n            excerpt\n            language {\n              code\n              locale\n              name\n              slug\n            }\n            slug\n          }\n        }\n        translations {\n          name\n          slug\n          posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n            nodes {\n              title\n              excerpt\n              language {\n                code\n                locale\n                name\n                slug\n              }\n              slug\n            }\n          }\n          language {\n            slug\n          }\n        }\n        seo {\n          title\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetAllPostPreviewsByCategory(\n    $exclude: [ID] = [1] # Allgemein\n    $field: PostObjectsConnectionOrderbyEnum = DATE\n    $order: OrderEnum = DESC\n    $stati: [PostStatusEnum] = [PUBLISH]\n  ) {\n    categories(where: { exclude: $exclude }) {\n      nodes {\n        count\n        name\n        slug\n        language {\n          code\n          locale\n          name\n          slug\n        }\n        children {\n          nodes {\n            count\n            name\n            slug\n            children {\n              nodes {\n                count\n                name\n                slug\n                id\n              }\n            }\n          }\n        }\n        posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n          nodes {\n            title\n            excerpt\n            language {\n              code\n              locale\n              name\n              slug\n            }\n            slug\n          }\n        }\n        translations {\n          name\n          slug\n          posts(where: { orderby: { field: $field, order: $order }, stati: $stati }) {\n            nodes {\n              title\n              excerpt\n              language {\n                code\n                locale\n                name\n                slug\n              }\n              slug\n            }\n          }\n          language {\n            slug\n          }\n        }\n        seo {\n          title\n          canonical\n          metaDesc\n          metaRobotsNofollow\n          metaRobotsNoindex\n          opengraphSiteName\n          opengraphAuthor\n          opengraphDescription\n          opengraphPublisher\n          opengraphTitle\n          opengraphType\n          opengraphUrl\n          opengraphPublishedTime\n          opengraphModifiedTime\n          opengraphImage {\n            sourceUrl\n          }\n          twitterDescription\n          twitterTitle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CreateComment($author: String = "", $authorEmail: String = "", $content: String = "", $parent: ID = "", $commentOn: Int = 1) {\n  createComment(\n    input: {author: $author, authorEmail: $authorEmail, commentOn: $commentOn, content: $content, parent: $parent}\n  ) {\n    comment {\n      id\n      content\n      status\n      isRestricted\n      author {\n        node {\n          name\n          email\n        }\n      }\n    }\n    success\n  }\n}',
): (typeof documents)['mutation CreateComment($author: String = "", $authorEmail: String = "", $content: String = "", $parent: ID = "", $commentOn: Int = 1) {\n  createComment(\n    input: {author: $author, authorEmail: $authorEmail, commentOn: $commentOn, content: $content, parent: $parent}\n  ) {\n    comment {\n      id\n      content\n      status\n      isRestricted\n      author {\n        node {\n          name\n          email\n        }\n      }\n    }\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetAuthor($id: ID = "1", $idType: UserNodeIdTypeEnum = DATABASE_ID) {\n  user(id: $id, idType: $idType) {\n    seo {\n      social {\n        facebook\n        instagram\n        linkedIn\n        mySpace\n        pinterest\n        soundCloud\n        twitter\n        wikipedia\n        youTube\n      }\n    }\n    socialAdvanced {\n      github\n      mastodon\n    }\n  }\n}',
): (typeof documents)['query GetAuthor($id: ID = "1", $idType: UserNodeIdTypeEnum = DATABASE_ID) {\n  user(id: $id, idType: $idType) {\n    seo {\n      social {\n        facebook\n        instagram\n        linkedIn\n        mySpace\n        pinterest\n        soundCloud\n        twitter\n        wikipedia\n        youTube\n      }\n    }\n    socialAdvanced {\n      github\n      mastodon\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetCategoryBySlug($first: Int = 1000, $slug: [String] = "") {\n  categories(first: $first, where: {slug: $slug}) {\n    nodes {\n      name\n      slug\n      count\n      language {\n        code\n        locale\n        name\n        slug\n      }\n      seo {\n        title\n        canonical\n        metaDesc\n        metaRobotsNofollow\n        metaRobotsNoindex\n        opengraphSiteName\n        opengraphAuthor\n        opengraphDescription\n        opengraphPublisher\n        opengraphTitle\n        opengraphType\n        opengraphUrl\n        opengraphPublishedTime\n        opengraphModifiedTime\n        opengraphImage {\n          sourceUrl\n        }\n        twitterDescription\n        twitterTitle\n      }\n    }\n  }\n}\n\nquery GetAllCategories($first: Int = 1000, $hideEmpty: Boolean = true, $languages: [LanguageCodeEnum!] = [DE, EN], $orderby: TermObjectsConnectionOrderbyEnum = NAME, $exclude: [ID] = [1, 96]) {\n  categories(\n    first: $first\n    where: {exclude: $exclude, orderby: $orderby, hideEmpty: $hideEmpty, languages: $languages}\n  ) {\n    nodes {\n      ...CategoryFields\n      children {\n        nodes {\n          ...CategoryFields\n          children {\n            nodes {\n              ...CategoryFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on Category {\n  count\n  name\n  slug\n  language {\n    code\n    slug\n    locale\n  }\n}',
): (typeof documents)['query GetCategoryBySlug($first: Int = 1000, $slug: [String] = "") {\n  categories(first: $first, where: {slug: $slug}) {\n    nodes {\n      name\n      slug\n      count\n      language {\n        code\n        locale\n        name\n        slug\n      }\n      seo {\n        title\n        canonical\n        metaDesc\n        metaRobotsNofollow\n        metaRobotsNoindex\n        opengraphSiteName\n        opengraphAuthor\n        opengraphDescription\n        opengraphPublisher\n        opengraphTitle\n        opengraphType\n        opengraphUrl\n        opengraphPublishedTime\n        opengraphModifiedTime\n        opengraphImage {\n          sourceUrl\n        }\n        twitterDescription\n        twitterTitle\n      }\n    }\n  }\n}\n\nquery GetAllCategories($first: Int = 1000, $hideEmpty: Boolean = true, $languages: [LanguageCodeEnum!] = [DE, EN], $orderby: TermObjectsConnectionOrderbyEnum = NAME, $exclude: [ID] = [1, 96]) {\n  categories(\n    first: $first\n    where: {exclude: $exclude, orderby: $orderby, hideEmpty: $hideEmpty, languages: $languages}\n  ) {\n    nodes {\n      ...CategoryFields\n      children {\n        nodes {\n          ...CategoryFields\n          children {\n            nodes {\n              ...CategoryFields\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CategoryFields on Category {\n  count\n  name\n  slug\n  language {\n    code\n    slug\n    locale\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetCommentsById($contentId: ID = "", $contentStatus: [PostStatusEnum] = PUBLISH, $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT, $first: Int = 10, $after: String = "") {\n  comments(\n    where: {contentId: $contentId, contentStatus: $contentStatus, orderby: $orderby}\n    first: $first\n    after: $after\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        ...CommentFields\n        replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n          nodes {\n            ...CommentFields\n            replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n              nodes {\n                ...CommentFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  content\n  dateGmt\n  id\n  parentId\n  commentId\n  author {\n    node {\n      name\n      id\n      avatar {\n        foundAvatar\n        height\n        width\n        url\n      }\n    }\n  }\n}',
): (typeof documents)['query GetCommentsById($contentId: ID = "", $contentStatus: [PostStatusEnum] = PUBLISH, $orderby: CommentsConnectionOrderbyEnum = COMMENT_DATE_GMT, $first: Int = 10, $after: String = "") {\n  comments(\n    where: {contentId: $contentId, contentStatus: $contentStatus, orderby: $orderby}\n    first: $first\n    after: $after\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        ...CommentFields\n        replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n          nodes {\n            ...CommentFields\n            replies(where: {contentStatus: PUBLISH, orderby: COMMENT_DATE_GMT}) {\n              nodes {\n                ...CommentFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment CommentFields on Comment {\n  content\n  dateGmt\n  id\n  parentId\n  commentId\n  author {\n    node {\n      name\n      id\n      avatar {\n        foundAvatar\n        height\n        width\n        url\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetPrimaryMenu {\n  menus(where: {location: PRIMARY_MENU}) {\n    nodes {\n      menuItems {\n        edges {\n          node {\n            ...MenuItemFields\n            connectedNode {\n              node {\n                ... on Page {\n                  isPostsPage\n                  slug\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuById($id: ID = "") {\n  menu(id: $id, idType: DATABASE_ID) {\n    menuItems(where: {parentDatabaseId: 0}) {\n      nodes {\n        ...MenuItemFields\n        childItems {\n          nodes {\n            ...MenuItemFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuItems($language: LanguageCodeFilterEnum = ALL, $location: MenuLocationEnum = PRIMARY_MENU) {\n  menuItems(\n    where: {language: $language, location: $location, parentDatabaseId: 0}\n  ) {\n    nodes {\n      ...MenuItemFields\n      childItems {\n        nodes {\n          ...MenuItemFields\n        }\n      }\n    }\n  }\n}\n\nfragment MenuItemFields on MenuItem {\n  label\n  order\n  path\n}',
): (typeof documents)['query GetPrimaryMenu {\n  menus(where: {location: PRIMARY_MENU}) {\n    nodes {\n      menuItems {\n        edges {\n          node {\n            ...MenuItemFields\n            connectedNode {\n              node {\n                ... on Page {\n                  isPostsPage\n                  slug\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuById($id: ID = "") {\n  menu(id: $id, idType: DATABASE_ID) {\n    menuItems(where: {parentDatabaseId: 0}) {\n      nodes {\n        ...MenuItemFields\n        childItems {\n          nodes {\n            ...MenuItemFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMenuItems($language: LanguageCodeFilterEnum = ALL, $location: MenuLocationEnum = PRIMARY_MENU) {\n  menuItems(\n    where: {language: $language, location: $location, parentDatabaseId: 0}\n  ) {\n    nodes {\n      ...MenuItemFields\n      childItems {\n        nodes {\n          ...MenuItemFields\n        }\n      }\n    }\n  }\n}\n\nfragment MenuItemFields on MenuItem {\n  label\n  order\n  path\n}'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
